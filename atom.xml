<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>fairy&amp;city</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-05T02:35:01.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ztao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>日常学习之docker笔记</title>
    <link href="http://example.com/post/4417b09c.html"/>
    <id>http://example.com/post/4417b09c.html</id>
    <published>2021-01-03T05:40:52.000Z</published>
    <updated>2021-01-05T02:35:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>宝塔面板安装</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p <span class="number">8080</span>:<span class="number">80</span>(访问端口:映射端口) --name my-nginx(定义容器名称) -d(后台运行) nginx(镜像名称)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker compose"></a>docker compose</h3><p>国内安装(包含了下载路径,存放在linux中的目录):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https:<span class="comment">//get.daocloud.io/docker/compose/releases/download/1.23.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span></span><br></pre></td></tr></table></figure><p>提升权限:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>参数解释: </p><p><code>volumes</code>: 挂载一个目录或者一个已存在的数据卷容器,格式: <code>[HOST:CONTAINER]</code>或者<code>[HOST:CONTAINER:ro]</code>,后者对于容器来说，数据卷是只读的，这样可以有效保护宿主机的文件系统</p><p>简单理解: 把容器内的数据挂载到容器外,也就是服务器里面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">volumes:</span><br><span class="line">  <span class="comment">// 只是指定一个路径,Docker会自动在创建一个数据卷（这个路径是容器内部的）</span></span><br><span class="line">  - <span class="regexp">/var/</span>lib/mysql</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用绝对路径挂载数据卷</span></span><br><span class="line">  - <span class="regexp">/opt/</span>data:<span class="regexp">/var/</span>lib/mysql</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 以Compose配置文件为中心的相对路径作为数据卷挂载到容器</span></span><br><span class="line">  - ./cache:<span class="regexp">/tmp/</span>cache</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用用户的相对路径(~/表示的目录是/home/&lt;用户目录&gt;/ 或者 /root/)</span></span><br><span class="line">  - ~<span class="regexp">/configs:/</span>etc/configs/:ro</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 已经存在的命名的数据卷</span></span><br><span class="line">  - datavolume:<span class="regexp">/var/</span>lib/mysql</span><br></pre></td></tr></table></figure><h3 id="MongoDB安装"><a href="#MongoDB安装" class="headerlink" title="MongoDB安装"></a><code>MongoDB</code>安装</h3><p>创建<code>docker-compose.yml</code>文件:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&quot;3&quot;</span> </span><br><span class="line">services:</span><br><span class="line">  mongodb:</span><br><span class="line">    image: mongo:latest  ---镜像名称</span><br><span class="line">    restart: always</span><br><span class="line">    container_name: mongo_db ---容器名称</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">39999</span>:<span class="number">27017</span>  ---服务器端口:容器端口</span><br><span class="line">    environment:</span><br><span class="line">  - MONGO_INITDB_DATABASE=默认的数据库</span><br><span class="line">      - MONGO_INITDB_ROOT_USERNAME=超级用户名</span><br><span class="line">      - MONGO_INITDB_ROOT_PASSWORD=超级用户密码</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="regexp">/home/m</span>ongo/mongo-volume:<span class="regexp">/data/</span>db   ---把容器的数据映射到服务器home目录下的mongo/mongo-volume</span><br><span class="line">      - <span class="regexp">/home/m</span>ongo/init-mongo.js:<span class="regexp">/docker-entrypoint-initdb.d/i</span>nit-mongo.js:ro ---执行mongo目录下的init-mongo.js文件映射到容器内只读</span><br></pre></td></tr></table></figure><p>进入<code>docker</code>镜像的<code>mongdb</code>命令行</p><p><code>mongo_db</code>为容器名称</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mongo_db bash </span><br></pre></td></tr></table></figure><h4 id="连接数据库流程"><a href="#连接数据库流程" class="headerlink" title="连接数据库流程"></a>连接数据库流程</h4><p>步骤一: 进入<code>admin</code>,因为设置了密码权限,需要验证</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录管理员用户</span></span><br><span class="line">use admin</span><br><span class="line">db.auth(用户名,密码) <span class="comment">//要在对应的数据库</span></span><br></pre></td></tr></table></figure><p>步骤二: 创建数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use stock</span><br></pre></td></tr></table></figure><p>步骤三:设置权限</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//role对应权限</span></span><br><span class="line">Read：允许用户读取指定数据库</span><br><span class="line">readWrite：允许用户读写指定数据库</span><br><span class="line">dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</span><br><span class="line">userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户</span><br><span class="line">clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。</span><br><span class="line">readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限</span><br><span class="line">readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限</span><br><span class="line">userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</span><br><span class="line">dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。</span><br><span class="line">root：只在admin数据库中可用。超级账号，超级权限</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(&#123;<span class="attr">user</span>:<span class="string">&quot;user01&quot;</span>,<span class="attr">pwd</span>:<span class="string">&quot;123456&quot;</span>,<span class="attr">roles</span>:[&#123;<span class="attr">role</span>:<span class="string">&quot;readWrite&quot;</span>,<span class="attr">db</span>:<span class="string">&quot;stock&quot;</span>&#125;]&#125;)</span><br></pre></td></tr></table></figure><p>步骤四: 重启<code>MongoDB</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure><p>步骤五:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoose.connect(<span class="string">`mongodb://<span class="subst">$&#123;USER&#125;</span>:<span class="subst">$&#123;PWD&#125;</span>@<span class="subst">$&#123;IP&#125;</span>:<span class="subst">$&#123;PORT&#125;</span>/stock`</span>, &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,<span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure><p>完毕!</p><h3 id="jenkins安装"><a href="#jenkins安装" class="headerlink" title="jenkins安装"></a><code>jenkins</code>安装</h3><p>安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull jenkinszh/jenkins-zh</span><br></pre></td></tr></table></figure><p><code>docker-compose.yml</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">jenkins:</span><br><span class="line">  image: jenkinszh/jenkins-zh</span><br><span class="line">  container_name: my_jenkins</span><br><span class="line">  restart: always</span><br><span class="line">  ports:</span><br><span class="line">    - <span class="string">&#x27;39000:8080&#x27;</span></span><br><span class="line">    - <span class="string">&#x27;39001:50000&#x27;</span></span><br><span class="line">  environment:</span><br><span class="line">    - TZ=Asia/Shanghai    #指定容器运行所属时区</span><br><span class="line">  volumes:</span><br><span class="line">    - <span class="regexp">/home/</span>jenkins:<span class="regexp">/var/</span>jenkins_home</span><br><span class="line">    - <span class="regexp">/home/</span>jenkins/docker.sock:<span class="regexp">/var/</span>run/docker.sock</span><br></pre></td></tr></table></figure><p>因为容器中<code>jenkins user</code>的<code>uid</code>为1000,而<code>/home/jenkins</code>的权限为root,所以需要修改<code>/home/jenkins</code>的权限</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R <span class="number">1000</span>:<span class="number">1000</span> /home/jenkins</span><br></pre></td></tr></table></figure><p>运行:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>获取Jenkins密码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器名称/容器ID bash</span><br><span class="line">cat /<span class="keyword">var</span>/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><h3 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a><code>redis</code>安装</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redisWeb:</span><br><span class="line">  image: redis</span><br><span class="line">  restart: always</span><br><span class="line">  container_name: redis_db</span><br><span class="line">  ports:</span><br><span class="line">    - 26379:6379  #将容器的6379端口映射到主机的16379端口上</span><br><span class="line">  command: redis-server --requirepass 123456 #指定redis的密码为123456</span><br><span class="line">  volumes:</span><br><span class="line">    - /home/redis/data:/data   #容器和宿主机可以通过存储卷共享文件</span><br></pre></td></tr></table></figure><h3 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a><code>mysql</code>安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysqldb:</span><br><span class="line">   image: mysql</span><br><span class="line">   restart: always</span><br><span class="line">   container_name: mysql_db</span><br><span class="line">   command: </span><br><span class="line">     --<span class="keyword">default</span>-authentication-plugin=mysql_native_password</span><br><span class="line">     --character-set-server=utf8mb4</span><br><span class="line">     --collation-server=utf8mb4_general_ci</span><br><span class="line">     --max_connections=<span class="number">1000</span></span><br><span class="line">   ports:</span><br><span class="line">     - <span class="number">39306</span>:<span class="number">3306</span></span><br><span class="line">   environment:</span><br><span class="line">     - MYSQL_ROOT_PASSWORD=超级密码</span><br><span class="line">     - MYSQL_USER=登录用户名</span><br><span class="line">     - MYSQL_PASSWORD=登录密码</span><br><span class="line">   volumes:</span><br><span class="line">     - <span class="regexp">/home/my</span>sql/db:<span class="regexp">/var/</span>lib/mysql</span><br><span class="line">     - <span class="regexp">/home/my</span>sql/conf/my.cnf:<span class="regexp">/etc/my</span>.cnf</span><br></pre></td></tr></table></figure><p>进入命令:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>NODE连接如果报错如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Client does not support authentication protocol requested by server; consider upgrading MySQL client</span><br></pre></td></tr></table></figure><p>需更改加密方式并刷新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;密码&#39;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>创建数据库,并设置连接(分号不能少),完成以后<strong>重启服务器</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建数据库叫phpDB</span></span><br><span class="line">CREATE DATABASE 数据库名 charset=utf8;</span><br><span class="line">eg: CREATE DATABASE stock charset=utf8;</span><br><span class="line"><span class="comment">//创建新用户叫abc</span></span><br><span class="line">create user <span class="string">&#x27;用户名&#x27;</span> identified <span class="keyword">with</span> mysql_native_password by <span class="string">&#x27;密码&#x27;</span>;</span><br><span class="line">eg: create user <span class="string">&#x27;stock001&#x27;</span> identified <span class="keyword">with</span> mysql_native_password by <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="comment">//授权abc用户拥有phpDB数据库的所有权限</span></span><br><span class="line">GRANT ALL PRIVILEGES ON phpDB.* TO <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">eg: GRANT ALL PRIVILEGES ON stock.* TO <span class="string">&#x27;stock001&#x27;</span>;</span><br><span class="line"><span class="comment">//刷新权限</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除用户</span></span><br><span class="line">DELETE FROM user WHERE User=<span class="string">&quot;用户名&quot;</span> and Host=<span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="comment">//刷新权限</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新密码</span></span><br><span class="line">update mysql.user set password=password(<span class="string">&#x27;新密码&#x27;</span>) where User=<span class="string">&quot;用户名&quot;</span> and Host=<span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="comment">//刷新权限</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;宝塔面板安装&lt;/p&gt;
&lt;h3 id=&quot;运行&quot;&gt;&lt;a href=&quot;#运行&quot; class=&quot;headerlink&quot; title=&quot;运行&quot;&gt;&lt;/a&gt;运行&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run -p &lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;(访问端口:映射端口) --name my-nginx(定义容器名称) -d(后台运行) nginx(镜像名称)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>2021基金策略</title>
    <link href="http://example.com/post/5ed0b3ae.html"/>
    <id>http://example.com/post/5ed0b3ae.html</id>
    <published>2021-01-01T11:02:47.000Z</published>
    <updated>2021-01-05T02:35:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基金策略"><a href="#基金策略" class="headerlink" title="基金策略"></a>基金策略</h2><p><strong>最最最最重要的一点: 永远不要离场,耐心比什么都珍贵</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一入基金深似海，从此亏钱是路人</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="1-策略总结"><a href="#1-策略总结" class="headerlink" title="1. 策略总结"></a>1. 策略总结</h3><table><thead><tr><th>配置项</th><th>解释</th><th>实例</th></tr></thead><tbody><tr><td>后卫</td><td>防守型,保底收益</td><td>债券类基金</td></tr><tr><td>中场</td><td>稳中求胜</td><td>指数型,如上证50和沪深300;价值投资型,如白马蓝筹,大盘基金</td></tr><tr><td>前锋</td><td>主动进取,挖掘利润</td><td>科技以及新兴产业,新基建</td></tr></tbody></table><h4 id="1-1-343稳健阵型"><a href="#1-1-343稳健阵型" class="headerlink" title="1.1 343稳健阵型"></a>1.1 343稳健阵型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">30%放后卫</span><br><span class="line">40%放中场</span><br><span class="line">30%放前锋</span><br></pre></td></tr></table></figure><h4 id="1-2-253进取阵型"><a href="#1-2-253进取阵型" class="headerlink" title="1.2 253进取阵型"></a>1.2 253进取阵型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">20%放后卫</span><br><span class="line">50%放中场</span><br><span class="line">30%放前锋</span><br></pre></td></tr></table></figure><h3 id="2-基金分类"><a href="#2-基金分类" class="headerlink" title="2. 基金分类"></a>2. 基金分类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">货币,债券型基金</span><br><span class="line">波动率小,稳健,适合防守,稳固后方.</span><br><span class="line"></span><br><span class="line">混合型基金</span><br><span class="line">    风格可变,可攻可受,适合当中场,掌握中军.</span><br><span class="line"></span><br><span class="line">股票型,指数型,QDII型</span><br><span class="line">风格激进,适合当前锋,冲锋陷阵.</span><br></pre></td></tr></table></figure><p>以下基金按收益逐渐增高排序:</p><h4 id="2-1-货币型基金"><a href="#2-1-货币型基金" class="headerlink" title="2.1 货币型基金"></a>2.1 货币型基金</h4><p>稳得一批</p><h4 id="2-2-债券型基金"><a href="#2-2-债券型基金" class="headerlink" title="2.2 债券型基金"></a>2.2 债券型基金</h4><p>80%资产买债券,比货币高</p><h4 id="2-3-混合型基金"><a href="#2-3-混合型基金" class="headerlink" title="2.3 混合型基金"></a>2.3 混合型基金</h4><p>股票,债券混合投资</p><h4 id="2-4-股票型基金"><a href="#2-4-股票型基金" class="headerlink" title="2.4 股票型基金"></a>2.4 股票型基金</h4><p>80%资产买股票,高风险高收益</p><h4 id="2-5-指数型基金"><a href="#2-5-指数型基金" class="headerlink" title="2.5 指数型基金"></a>2.5 指数型基金</h4><p>全部投资股票,如白酒指数、医药指数、食品指数,上证50,沪深300等</p><h4 id="2-6-QDII基金"><a href="#2-6-QDII基金" class="headerlink" title="2.6 QDII基金"></a>2.6 <code>QDII</code>基金</h4><p>全部投资外国的资产,如工银全球股票(486001)</p><h3 id="3-选择基金"><a href="#3-选择基金" class="headerlink" title="3. 选择基金"></a>3. 选择基金</h3><p>因为个人肯定不如专业的机构调研,所以不需要太过于在意如何选择基金,总结就是:</p><p><strong>支付宝金选,同花顺金选,天天优选为主,然后配合一些基金经理特别厉害的基金</strong></p><p>在这其中,在通过过往业绩,以及回撤,盈利等条件,<strong>优中选优</strong></p><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3><p>基金这里,今年的收益,说实话 ,挺满意的,最高加仓到10万,吓得要死.然后慢慢保持在4万左右,到31号的收益大概是8800.亏损最多的是万家,加起来亏损了6200这样子.</p><p>当时大概是在3月,犯了一个最大的错误:<strong>在亏损的时候应该先去研究一下,基金的最大回撤,**如果在这附近,那么久可以躺下了,但是当时基金投入的太多了,就怕遇到当时买原油的情况,1晚上1万没了,所以担惊受怕的,直接清仓了,现在看来,当时好蠢.如果早知道这句话:**永远不要离场,耐心比什么都珍贵</strong>,也许情况会改变很多.</p><p>2021年开始,放弃看基金的评论,因为基金就是一个<strong>坚持</strong>的游戏,只要坚持,基本上没有亏损的,不要在乎一时的得失.<strong>基金要从长远看</strong>.</p><p>2021年,认真系统的学习一下基金,然后建立自己的组合策略,而不是像之前的那样,谁涨买谁.</p><h3 id="5-展望"><a href="#5-展望" class="headerlink" title="5.展望"></a>5.展望</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020年的基金收益,取平均值的话大概在18%左右,所以对2021的期望就是保底翻番,也就是36%左右,可以跑赢95%的人!</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;基金策略&quot;&gt;&lt;a href=&quot;#基金策略&quot; class=&quot;headerlink&quot; title=&quot;基金策略&quot;&gt;&lt;/a&gt;基金策略&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;最最最最重要的一点: 永远不要离场,耐心比什么都珍贵&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;一入基金深似海，从此亏钱是路人&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="理财" scheme="http://example.com/categories/%E7%90%86%E8%B4%A2/"/>
    
    
    <category term="基金" scheme="http://example.com/tags/%E5%9F%BA%E9%87%91/"/>
    
    <category term="理财" scheme="http://example.com/tags/%E7%90%86%E8%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>日常学习之indexedDB</title>
    <link href="http://example.com/post/c51c6aab.html"/>
    <id>http://example.com/post/c51c6aab.html</id>
    <published>2020-11-25T02:24:10.000Z</published>
    <updated>2021-01-05T02:35:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>随着浏览器的功能不断增强,越来越多的网站开始考虑,将大量数据储存在客户端,这样可以减少从服务器获取数据,直接从本地获取数据.</p><p>Cookie 的大小不超过<strong>4K</strong>,且每次请求都会发送回服务器</p><p><code>LocalStorage</code>在<strong>2.5-10M</strong>,而且不提供搜索功能,不能建立自定义的索引</p><p><code>IndexedDB</code>就是浏览器提供的本地数据库,<code>IndexedDB</code>允许储存大量数据,提供查找接口,还能建立索引</p><a id="more"></a><p><code>indexedDB</code>特点:</p><ol><li>键值对存储</li><li>异步,不会锁死浏览器</li><li>支持事务,意味着一系列的操作步骤只要有一个失败,那么就回滚到事务发生之前,不存在修改部分数据的情况</li><li>同源限制. 每一个数据库对应他创建的域名</li><li>存储空间大. <strong>不小于250M</strong></li><li>支持二进制存储,比如<code>ArrayBuffer对象</code>和<code>Blob对象</code></li></ol><p>和<code>SQL型数据库</code>对比图:</p><img src="/post/c51c6aab/indexedDB.jpg" class=""><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><code>indexedDB对象</code>接口包含:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数据库: IDBDatabase对象</span><br><span class="line">对象仓库: IDBObjectStore对象</span><br><span class="line">索引: IDBIndex对象</span><br><span class="line">事务: IDBTransaction对象,提供error,abort,complete,success等事件来监听操作结果</span><br><span class="line">操作请求: IDBRequest对象</span><br><span class="line">指针: IDBCursor对象</span><br><span class="line">主键集合: IDBKeyRange对象</span><br></pre></td></tr></table></figure><p>和<code>mongoDB</code>对照图:</p><img src="/post/c51c6aab/img1.jpg" class=""><h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><p>介绍: <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API/Basic_Concepts_Behind_IndexedDB">传送门</a></p><p>使用: <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API/Using_IndexedDB">传送门</a></p><h3 id="打开数据库"><a href="#打开数据库" class="headerlink" title="打开数据库"></a>打开数据库</h3><p>使用<code>indexedDB.open()</code>打开数据库,使用如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> IDBRequest = <span class="built_in">window</span>.indexedDB.open(databaseName, version);</span><br></pre></td></tr></table></figure><p>参数一: 数据库名称,数据库不存在就创建</p><p>参数二: 数据库版本,不存在默认1</p><p>返回<code>IDBRequest对象</code>,提供<code>error</code>,<code>success</code>,<code>upgradeneeded</code>三个事件处理操作结果</p><h4 id="error事件"><a href="#error事件" class="headerlink" title="error事件"></a>error事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IDBRequest.onerror= <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;打开数据库报错&#x27;</span>)&#125;</span><br></pre></td></tr></table></figure><h4 id="success事件"><a href="#success事件" class="headerlink" title="success事件"></a>success事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IDBRequest.onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;数据库打开成功&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> db = IDBRequest.result; <span class="comment">//获取到数据库对象IDBDatabase</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="upgradeneeded事件"><a href="#upgradeneeded事件" class="headerlink" title="upgradeneeded事件"></a>upgradeneeded事件</h4><p>如果指定的版本号大于数据库实际版本号,就会发生数据库升级事件<code>upgradeneeded</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db;</span><br><span class="line">IDBRequest.onupgradeneeded = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  db = event.target.result; <span class="comment">//获取到数据库对象IDBDatabase</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h3><p>也是使用<code>indexedDB.open()</code>操作,不存在就新建数据库,新建完成的后续操作主要是在<code>upgradeneeded</code>事件中完成监听</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IDBRequest.onupgradeneeded = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> db = event.target.result; <span class="comment">//数据库IDBDatebase对象</span></span><br><span class="line">    <span class="keyword">var</span> objectStore = db.createObjectStore(<span class="string">&#x27;person&#x27;</span>,&#123;<span class="attr">keyPath</span>: <span class="string">&#x27;id&#x27;</span>&#125;);<span class="comment">//新增一张person表,主键是id</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更好的写法(先判断person表是否存在,不存在在创建)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db;</span><br><span class="line">IDBRequest.onupgradeneeded = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    db = event.target.result; <span class="comment">//数据库IDBDatebase对象</span></span><br><span class="line">    <span class="keyword">var</span> objectStore;<span class="comment">//IDBObjectStore对象仓库对象[表]</span></span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">!db.objectStoreNames.contains(<span class="string">&#x27;person&#x27;</span>)</span>)</span>&#123;</span><br><span class="line">        objectStore = db.createObjectStore(<span class="string">&#x27;person&#x27;</span>,&#123;<span class="attr">keyPath</span>: <span class="string">&#x27;id&#x27;</span>&#125;);<span class="comment">//新增一张person表,主键是id</span></span><br><span class="line">        <span class="comment">//如果没有适合主键的属性</span></span><br><span class="line">        objectStore = db.createObjectStore(<span class="string">&#x27;person&#x27;</span>,&#123;<span class="attr">autoIncrement</span>: <span class="literal">true</span>&#125;) <span class="comment">//自动生成主键</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建对象仓库(表)后,下一步可以新建索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db;</span><br><span class="line">IDBRequest.onupgradeneeded = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    db = event.target.result; <span class="comment">//数据库IDBDatebase对象</span></span><br><span class="line">    <span class="keyword">var</span> objectStore;<span class="comment">//IDBObjectStore对象仓库对象[表]</span></span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">!db.objectStoreNames.contains(<span class="string">&#x27;person&#x27;</span>)</span>)</span>&#123;</span><br><span class="line">        objectStore = db.createObjectStore(<span class="string">&#x27;person&#x27;</span>,&#123;<span class="attr">keyPath</span>: <span class="string">&#x27;id&#x27;</span>&#125;);<span class="comment">//新增一张person表,主键是id</span></span><br><span class="line">        <span class="comment">//如果没有适合主键的属性</span></span><br><span class="line">        <span class="comment">//objectStore = db.createObjectStore(&#x27;person&#x27;,&#123;autoIncrement: true&#125;) //自动生成主键</span></span><br><span class="line">        objectStore.createIndex(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, &#123; <span class="attr">unique</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">        objectStore.createIndex(<span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, &#123; <span class="attr">unique</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>IDBObjectStore.createIndex()</code>的三个参数分别为索引名称,索引所在的属性,配置对象(说明改属性是否包含重复的值)</p><h3 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h3><p>新增数据需要通过<code>IDBTransaction事务对象</code>完成,新增数据时需要新建一个事务,必须制定表名称和操作模式(读写或者只读)</p><p><code>upgradeneeded</code>事件执行事务<code>transaction</code>时需要先判断版本改变事务的完成情况,即<code>event.target.transaction</code></p><p><code>You need to check for the completion of the version change transaction before attempting to load the object store</code></p><p>注: <code>indexedDB</code>中不能直接获取<code>objectStore</code>,必须通过事务<code>transaction</code>,<code>db.objectStore(name)</code>是错误的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">$event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> trans = $event.target.transaction</span><br><span class="line">    trans.oncomplete = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> request = db.transaction([<span class="string">&#x27;person&#x27;</span>], <span class="string">&#x27;readwrite&#x27;</span>)</span><br><span class="line">        .objectStore(<span class="string">&#x27;person&#x27;</span>)</span><br><span class="line">        .add(&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">24</span>,<span class="attr">email</span>: <span class="string">&#x27;zhangsan@example.com&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">        request.onsucess = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;数据写入成功&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;数据写入失败&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(event)</span><br></pre></td></tr></table></figure><p>解读: </p><p>新建一个事务<code>db.transaction(表,操作模式)</code>;</p><p>事务建好以后要拿到对象仓库,通过<code>事务.objectStore(表)</code>获取到<code>IDBObjectStore对象</code>(对象仓库);</p><p>在通过执行对象仓库的<code>add()</code>方法像表中写入数据</p><p>写入是异步操作,听过监听连接对象的<code>error</code>和<code>success</code>事件,了解是否写入成功</p><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><p>通过事务获取仓库对象,然后使用get方法获取数据,可以查看数据仓库对象的API</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> customerTransaction = db.transaction(<span class="string">&#x27;customers&#x27;</span>, <span class="string">&#x27;readwrite&#x27;</span>); <span class="comment">//获取事务</span></span><br><span class="line"><span class="keyword">var</span> customerObjectStore = customerTransaction.objectStore(<span class="string">&#x27;customers&#x27;</span>);<span class="comment">//通过事务获取数据仓库</span></span><br><span class="line"><span class="keyword">var</span> objectIndex = customerObjectStore.get(<span class="number">1</span>); <span class="comment">//获取数据仓库的id=1的数据</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;索引&#x27;</span>, objectIndex)</span><br><span class="line">objectIndex.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;<span class="comment">//数据获取成功执行</span></span><br><span class="line">    <span class="keyword">var</span> result = e.target.result;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;成功获取&#x27;</span>,result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>使用<code>delete</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = customerObjectStore.delete(<span class="number">2</span>);<span class="comment">//删除keyPath为id=2的数据</span></span><br></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>使用<code>put</code>方法(暂时更新只适合已有的<code>keyPath</code>,如果是<code>autoIncrement</code>自动增加的<code>keyPath</code>好像不能更新)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//keyPath是ssn</span></span><br><span class="line"><span class="keyword">var</span> putRequest = customerObjectStore.put(&#123; <span class="attr">ssn</span>: <span class="string">&quot;444-44-4444&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;测试&quot;</span>, <span class="attr">age</span>: <span class="number">35</span>, <span class="attr">email</span>: <span class="string">&quot;bill@company.com&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;更新数据&#x27;</span>, putRequest)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;随着浏览器的功能不断增强,越来越多的网站开始考虑,将大量数据储存在客户端,这样可以减少从服务器获取数据,直接从本地获取数据.&lt;/p&gt;
&lt;p&gt;Cookie 的大小不超过&lt;strong&gt;4K&lt;/strong&gt;,且每次请求都会发送回服务器&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LocalStorage&lt;/code&gt;在&lt;strong&gt;2.5-10M&lt;/strong&gt;,而且不提供搜索功能,不能建立自定义的索引&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IndexedDB&lt;/code&gt;就是浏览器提供的本地数据库,&lt;code&gt;IndexedDB&lt;/code&gt;允许储存大量数据,提供查找接口,还能建立索引&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="indexedDB" scheme="http://example.com/tags/indexedDB/"/>
    
  </entry>
  
  <entry>
    <title>session存储遇到的一些问题</title>
    <link href="http://example.com/post/5d53804b.html"/>
    <id>http://example.com/post/5d53804b.html</id>
    <published>2020-11-23T02:59:06.000Z</published>
    <updated>2021-01-05T02:35:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题发现"><a href="#问题发现" class="headerlink" title="问题发现"></a>问题发现</h2><p>最近在工作的时候,一些地方需要做接口的缓存处理,一般都采用的是<code>sessionStorage</code>做请求数据的缓存,然后偶尔就会出现这样的问题:  第一次请求数据的时候,在对数据操作的功能上会报一个<code>undefined</code>或者<code>null</code>这样的错误,<a id="more"></a>如下图所示:</p><img src="/post/5d53804b/issue1.jpg" class=""><p>然后我看了一下<code>session</code>结构,确实有存储的值:</p><img src="/post/5d53804b/issue2.jpg" class=""><p>那么问题就转变为: 有值但是请求到的是<code>null</code>,找不到值????第一眼就猜测原因是<code>ajax</code>请求异步,所以就按这个思路去解决问题</p><img src="/post/5d53804b/issue3.jpg" class=""><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>提前介绍2个点:</p><p><code>new Function()</code>的参数是某个字符串,在使用时,编译器会将参数中的字符串当作正常的脚本代码来执行! 详解:<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function">传送门</a></p><p><code>eval()</code>函数会将传入的字符串当做 JavaScript 代码进行执行,详解:<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval">传送门</a></p><h3 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h3><p>每次操作的时候,如果session里面有,就从session里面取值,如果没有,那么就重新请求接口,要保证程序稳定,没有<code>undefined</code>或者<code>null</code>之类的错误!</p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>解决了,但是感觉依然有简化的写法,需要继续想想:</p><img src="/post/5d53804b/issue4.jpg" class="">]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;问题发现&quot;&gt;&lt;a href=&quot;#问题发现&quot; class=&quot;headerlink&quot; title=&quot;问题发现&quot;&gt;&lt;/a&gt;问题发现&lt;/h2&gt;&lt;p&gt;最近在工作的时候,一些地方需要做接口的缓存处理,一般都采用的是&lt;code&gt;sessionStorage&lt;/code&gt;做请求数据的缓存,然后偶尔就会出现这样的问题:  第一次请求数据的时候,在对数据操作的功能上会报一个&lt;code&gt;undefined&lt;/code&gt;或者&lt;code&gt;null&lt;/code&gt;这样的错误,</summary>
    
    
    
    <category term="工作" scheme="http://example.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="存储" scheme="http://example.com/tags/%E5%AD%98%E5%82%A8/"/>
    
    <category term="session" scheme="http://example.com/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>日常学习之MVVM中的数据层</title>
    <link href="http://example.com/post/aa93dbcc.html"/>
    <id>http://example.com/post/aa93dbcc.html</id>
    <published>2020-11-19T02:58:31.000Z</published>
    <updated>2021-01-05T02:35:01.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/post/aa93dbcc/mvvm.jpg" class=""><a id="more"></a><p>来源: <a href="https://mp.weixin.qq.com/s/el1s-rvCZUVLyEaH4MXG7w">传送门</a></p><h2 id="需求1-API统一封装"><a href="#需求1-API统一封装" class="headerlink" title="需求1: API统一封装"></a>需求1: API统一封装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误形式</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line">axios.get(<span class="string">&#x27;/user?ID=12345&#x27;</span>)</span><br><span class="line"> .then(<span class="function"><span class="params">res</span>=&gt;</span> &#123;&#125;)</span><br><span class="line"> .catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;&#125;)</span><br><span class="line"><span class="comment">//正确写法main.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line">Vue.prototype.$http = axios</span><br><span class="line"><span class="comment">//引用</span></span><br><span class="line"><span class="built_in">this</span>.$http.get(<span class="string">&#x27;/user?ID=12345&#x27;</span>)</span><br><span class="line">.then(<span class="function"><span class="params">res</span>=&gt;</span> &#123;&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="需求2-接口复用"><a href="#需求2-接口复用" class="headerlink" title="需求2: 接口复用"></a>需求2: 接口复用</h2><p>部分接口不同页面重复使用,重复处理,造成代码冗余,案例如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//goods.vue[获取商品详情页,多个页面都要使用]</span></span><br><span class="line"><span class="built_in">this</span>.$http.get(<span class="string">&#x27;/getGoodsDetail?infoId=12345&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//判断接口请求成功</span></span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">response &amp;&amp; response.respCode == <span class="number">0</span> &amp;&amp; response.respData</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//从接口中提取头图</span></span><br><span class="line">        <span class="built_in">this</span>.headPic = response.respData.pics.split(<span class="string">&#x27;|&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">//将价格由分转换成元</span></span><br><span class="line">        <span class="built_in">this</span>.nowPrice = response.respData.nowPrice/<span class="number">100</span></span><br><span class="line">        <span class="comment">//是否包邮</span></span><br><span class="line">        <span class="built_in">this</span>.isFreePostage = response.respData.goodsTag.freePostage</span><br><span class="line">        <span class="comment">//...其他数据处理逻辑</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//错误提示</span></span><br><span class="line">        toast(response.errorMsg || response.errMsg || <span class="string">&#x27;接口错误&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>很多页面都要使用该接口,每个页面都有以下几个问题:</p><ol><li>接口请求成功的判断(业务层)</li><li>接口请求失败的错误处理(不同接口可能返回的错误信息也不一致)</li><li>接口数据的统一处理,比如提取头图,价格转换等</li><li>接口数据提取不安全:　比如 <code>response.respData.goodsTag.freePostage</code>这句代码有很高的风险,因为接口当中很可能没有goodsTag字段导致报错,常规的安全读取策略可能是下文的多次判断,会导致代码冗余度增加</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.isFreePostage = response.respData.goodsTag &amp;&amp; response.respData.goodsTag.freePostage</span><br></pre></td></tr></table></figure><p>基于以上问题,需要抽出<code>数据层Model</code>;</p><h2 id="Model实现"><a href="#Model实现" class="headerlink" title="Model实现"></a>Model实现</h2><p>对Model的期望:</p><ol><li>Model是统一结构</li><li>Model可以被复用或者继承</li><li>Model当中预处理好所有的数据逻辑,开发者可以直接使用数据而不用关心处理过程</li><li>Model应该有清晰的成功失败判断逻辑</li><li>Model应该提供安全的获取数据逻辑的结构</li></ol><p><strong>采用<code>ES6 class</code>封装模式,定义一个基类,提供了配置,请求,判定成功失败,数据处理逻辑,错误处理逻辑,安全读取数据方法,这些方法可以被继承,从而实现不同接口的个性处理</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Model.js</span></span><br><span class="line"><span class="keyword">import</span> Axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line"><span class="comment">//初始化配置操作</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//数据的获取方法</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">fetch</span>(<span class="params">options</span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置方法</span></span><br><span class="line"><span class="function"><span class="title">config</span>(<span class="params">options</span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判定成功失败逻辑</span></span><br><span class="line"><span class="function"><span class="title">isSuccess</span>(<span class="params">result</span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据处理逻辑</span></span><br><span class="line"><span class="function"><span class="title">handleData</span>(<span class="params">result</span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误处理逻辑</span></span><br><span class="line"><span class="function"><span class="title">handleError</span>(<span class="params">result</span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重置请求结果</span></span><br><span class="line"><span class="function"><span class="title">resetResult</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>填充基类的具体代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line"><span class="comment">//初始化配置操作</span></span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line"> <span class="built_in">this</span>.resetResult() <span class="comment">//重置请求结果</span></span><br><span class="line">     <span class="built_in">this</span>.domain = <span class="string">&#x27;https://app.zhuanzhuan.com&#x27;</span></span><br><span class="line">         <span class="built_in">this</span>.defaultType = <span class="string">&#x27;GET&#x27;</span></span><br><span class="line">         <span class="built_in">this</span>.options = &#123;&#125;</span><br><span class="line">         <span class="keyword">if</span>(options) <span class="built_in">this</span>.config(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据获取方法</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">fetch</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">Axios[<span class="built_in">this</span>.options.type](</span><br><span class="line"><span class="built_in">this</span>.options.url,</span><br><span class="line">options</span><br><span class="line">)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.resetResult()</span><br><span class="line"><span class="keyword">let</span> result = res &amp;&amp; res.data</span><br><span class="line"><span class="built_in">this</span>.result.state = <span class="built_in">this</span>.isSuccess(result) ? <span class="string">&#x27;success&#x27;</span>: <span class="string">&#x27;fail&#x27;</span></span><br><span class="line">             <span class="function"><span class="title">if</span>(<span class="params"><span class="built_in">this</span>.result.state == <span class="string">&#x27;success&#x27;</span></span>)</span>&#123;</span><br><span class="line">                 <span class="built_in">this</span>.result.data = <span class="built_in">this</span>.handleData(result)</span><br><span class="line">                 resolve(<span class="built_in">this</span>)</span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="built_in">this</span>.result.error = <span class="built_in">this</span>.handleError(result)</span><br><span class="line">                 resolve(<span class="built_in">this</span>)</span><br><span class="line">             &#125;</span><br><span class="line">&#125;)</span><br><span class="line">         .catch(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.resetResult()</span><br><span class="line">            <span class="built_in">this</span>.result.error = &#123;</span><br><span class="line">                errorCode: -<span class="number">9999</span>,</span><br><span class="line">                errorMsg: <span class="string">&#x27;网络错误&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">            resolve(<span class="built_in">this</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置方法</span></span><br><span class="line">    <span class="function"><span class="title">config</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.options = <span class="built_in">Object</span>.assign(</span><br><span class="line">            &#123;<span class="attr">type</span>: <span class="built_in">this</span>.defaultType&#125;,</span><br><span class="line">            <span class="built_in">this</span>.options,</span><br><span class="line">            options</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.options.type) <span class="built_in">this</span>.options.type.toLowerCase()</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断成功失败逻辑</span></span><br><span class="line">    <span class="function"><span class="title">isSuccess</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">parseInt</span>(result.respCode) === <span class="number">0</span> &amp;&amp; result.respData</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//数据处理逻辑</span></span><br><span class="line">    <span class="function"><span class="title">handleData</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result.respData</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//错误处理逻辑</span></span><br><span class="line">    <span class="function"><span class="title">handleError</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            errorCode: result.respCode,</span><br><span class="line">            errorMsg: result.errorMsg || result.errMsg || (result.respData? result.respData.errorMsg || result.respData.errorMsg : <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//重置请求结果</span></span><br><span class="line">    <span class="function"><span class="title">resetResult</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.result = &#123;</span><br><span class="line">            state: <span class="literal">null</span>,</span><br><span class="line">            data: <span class="literal">null</span>,</span><br><span class="line">            error: <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Model的目录结构如下:</p><img src="/post/aa93dbcc/model.jpg" class=""><h2 id="子Model实现"><a href="#子Model实现" class="headerlink" title="子Model实现"></a>子Model实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//GetGoodsDetail.js</span></span><br><span class="line"><span class="keyword">import</span> Model <span class="keyword">from</span> <span class="string">&#x27;Model.js&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetGoodsDetail</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">super</span>()</span><br><span class="line">        <span class="built_in">this</span>.config(&#123;</span><br><span class="line">            url: <span class="string">&#x27;/apiPath1/getGoodsDetail&#x27;</span>,</span><br><span class="line">            type: <span class="string">&#x27;get&#x27;</span> </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">handleData</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> data = result.respData</span><br><span class="line">        <span class="comment">//从接口提取头图</span></span><br><span class="line">        data.headPic = data.pics.split(<span class="string">&#x27;|&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">//将价格由分转换成元</span></span><br><span class="line">        data.nowPrice = data.nowPrice/<span class="number">100</span></span><br><span class="line">        <span class="comment">//是否包邮</span></span><br><span class="line">        data.isFreePostage = data.goodsTag &amp;&amp; data.goodsTag.freePostage</span><br><span class="line">        <span class="comment">//将处理好的数据返回</span></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">isSuccess</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">parseInt</span>(result.respCode) === <span class="number">0</span> &amp;&amp; result.respData &amp;&amp; result.respData.goodsState === <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引用子Model"><a href="#引用子Model" class="headerlink" title="引用子Model"></a>引用子Model</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo.vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;GetGoodsDetail&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;@/model/apiPath1/GetGoodsDetail&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="keyword">async</span> <span class="function"><span class="title">getGoodsDetail</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> res = (<span class="keyword">new</span> GetGoodsDetail()).fetch(&#123;<span class="attr">infoId</span>: <span class="string">&#x27;123456&#x27;</span>&#125;)</span><br><span class="line">            <span class="function"><span class="title">if</span>(<span class="params">res.result.state == <span class="string">&#x27;success&#x27;</span></span>)</span>&#123;</span><br><span class="line">                <span class="comment">//单独提取数据</span></span><br><span class="line">                <span class="built_in">this</span>.headPic = res.data.headPic</span><br><span class="line">                <span class="built_in">this</span>.nowPrice = res.data.nowPrice</span><br><span class="line">                <span class="built_in">this</span>.isFreePostage = res.data.isFreePostage</span><br><span class="line">                <span class="comment">//解构</span></span><br><span class="line">                <span class="keyword">let</span> &#123; headPic,nowPrice,isFreePostage &#125; = res.data</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                toast(res.result.error. errorMsg)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="需求3-安全提取数据"><a href="#需求3-安全提取数据" class="headerlink" title="需求3: 安全提取数据"></a>需求3: 安全提取数据</h2><p>在业务开发过程中, 前端和后端通常会约定好数据返回格式,比如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">respCode: <span class="number">0</span>,</span><br><span class="line">respData: &#123;</span><br><span class="line">   <span class="comment">//...其他数据</span></span><br><span class="line">   goodsTag:&#123;</span><br><span class="line">   <span class="comment">//...其他数据</span></span><br><span class="line">   freePostage: <span class="number">1</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是总有以外,比如要求必须有 goodsTag，其中必须有是否包邮字段 freePostage,有可能出现不期望的格式,这时候就需要判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> freePostage = res.respData &amp;&amp; res.respData.goodsTag &amp;&amp; res.respData.goodsTag.freePostage</span><br></pre></td></tr></table></figure><p>很麻烦,需要给Model添加一个安全获取数据的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Model.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//安全读取数据</span></span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params"><span class="built_in">this</span>.result &amp;&amp; <span class="built_in">this</span>.result.data</span>)</span>&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;/post/aa93dbcc/mvvm.jpg&quot; class=&quot;&quot;&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MVVM" scheme="http://example.com/tags/MVVM/"/>
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>日常学习之websocket笔记</title>
    <link href="http://example.com/post/427ca82b.html"/>
    <id>http://example.com/post/427ca82b.html</id>
    <published>2020-11-18T01:44:18.000Z</published>
    <updated>2021-01-05T02:35:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>图雀社区: <a href="https://my.oschina.net/u/4088983/blog/4667197">学习来源</a></p><h2 id="websocket和http区别"><a href="#websocket和http区别" class="headerlink" title="websocket和http区别"></a>websocket和http区别</h2><p><code>http</code>非持久性协议, AJAX轮询机制或者 <code>long pull</code>方式; 前者服务器压力大, 后者等待时间长</p><p><code>http1.1</code>默认开启<code>keep alive</code>长连接,但是一次只能一个,被动式触发</p><a id="more"></a><img src="/post/427ca82b/websocket1.png" class=""><p><code>websocket</code> 独立于<code>http</code>,但是必须进行一次握手,成功以后数据从TCP通道传输,有交集</p><img src="/post/427ca82b/websocket2.png" class=""><p><code>socket</code>也被称为套接字,是对传输层(TCP/IP)的接口封装,提供端对端的通信调用接口</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>弹幕订阅, 消息订阅, 多玩家游戏, 协同编辑, 股票基金实时报价, 视频会议, 在线教育, 聊天室应用</p><h3 id="websocket握手"><a href="#websocket握手" class="headerlink" title="websocket握手"></a>websocket握手</h3><p>请求报文:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;chat HTTP&#x2F;1.1</span><br><span class="line">Host: server.example.com</span><br><span class="line">Upgrade:websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw&#x3D;&#x3D;</span><br><span class="line">Sec-WebSocket-Protocol: chat, superchat</span><br><span class="line">Sec-WebSocket-Version: 13</span><br><span class="line">Origin: http:&#x2F;&#x2F;example.com</span><br></pre></td></tr></table></figure><p>与传统<code>http</code>报文不同的地方:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw&#x3D;&#x3D;</span><br><span class="line">Sec-WebSocket-Protocol: chat, superchat</span><br><span class="line">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure><p><code>Sec-WebSocket-Key</code> 浏览器随机生成,验证是否可以websocket通信,防止无意义或者无意的链接</p><p><code>Sec-Websocket-Protocol</code> 用户自定义字段,标识服务所需要的的协议</p><p><code>Sec-websocket-Version</code> 标识支持的websocket版本</p><p>服务器响应报文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk&#x3D;</span><br><span class="line">Sec-WebSocket-Protocol: chat</span><br></pre></td></tr></table></figure><p><code>101</code> 响应码表示要转换协议</p><p><code>Connection:Upgrade</code> 表示升级协议请求</p><p><code>Upgrade: websocket</code> 表示升级为<code>WebSocket</code>协议</p><p><code>Sec-WebSocket-Accept</code> 是经过服务器确认并且加密后的</p><p><code>Sec-WebSocket-Key</code> 用来证明服务端和客户端能进行通讯了</p><p><code>Sec-WebSocket-Protocol</code> 最终使用的协议</p><p>这步完成就表明TCP握手成功,后面走的就是<code>Websocket</code>协议进行通信了</p><h3 id="websocket心跳"><a href="#websocket心跳" class="headerlink" title="websocket心跳"></a>websocket心跳</h3><p>未知情况会导致socket断开,但是客户端和服务端却不知道,需要客户端定时发送<code>心跳ping</code>告知服务器还能抢救一下,不要走!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WebSocket对象的readyState属性有四种属性:</span><br><span class="line">0: 表示正在连接</span><br><span class="line">1: 表示连接成功，可以通信了</span><br><span class="line">2: 表示连接正在关闭</span><br><span class="line">3: 表示连接已经关闭，或者打开连接失败</span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>代码如下:</p><p>server端:</p><pre><code>const express = require(&#39;express&#39;)const app = express()const SocketServer = require(&#39;ws&#39;).Serverconst PORT = 3000const server = app.listen(PORT, () =&gt; &#123;  console.log(`listing on $&#123;PORT&#125;`)&#125;)//将express交给 socketServer开启websocket服务const wss = new SocketServer(&#123;server&#125;)//当websocket从外部连接时执行wss.on(&#39;connection&#39;, ws =&gt; &#123;  //连接时执行  console.log(&#39;client connected&#39;)  //定时发送消息给客户端  // const sendNowTime = setInterval(() =&gt; &#123;  //   ws.send(String(Date.now()))  // &#125;,1000)  //监听message,接收从客户端发送的消息  ws.on(&#39;message&#39;, data =&gt; &#123;    //data为客户端发送的消息,原封返回    ws.send(data)  &#125;)  ws.on(&#39;close&#39;, () =&gt; &#123;    console.log(&#39;close connection&#39;)  &#125;)&#125;)</code></pre><p>客户端: </p><p>方式一: 可以使用index.js结合index.html在浏览器测试</p><pre><code>//使用websocket地址向服务端开启连接let ws = new WebSocket(&#39;ws://localhost:3000&#39;)//开启后动作ws.onopen = () =&gt; &#123;  console.log(&#39;open connection&#39;)&#125;//接收服务端发送的消息ws.onmessage = (event) =&gt; &#123;  console.log(&#39;接收事件&#39;, event)&#125;//指定在关闭后执行的事件ws.onclose = () =&gt; &#123;  console.log(&#39;close connection&#39;)&#125;</code></pre><p>方式二: 在线测试 <a href="http://www.easyswoole.com/wstool.html">传送门</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;来源&quot;&gt;&lt;a href=&quot;#来源&quot; class=&quot;headerlink&quot; title=&quot;来源&quot;&gt;&lt;/a&gt;来源&lt;/h2&gt;&lt;p&gt;图雀社区: &lt;a href=&quot;https://my.oschina.net/u/4088983/blog/4667197&quot;&gt;学习来源&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;websocket和http区别&quot;&gt;&lt;a href=&quot;#websocket和http区别&quot; class=&quot;headerlink&quot; title=&quot;websocket和http区别&quot;&gt;&lt;/a&gt;websocket和http区别&lt;/h2&gt;&lt;p&gt;&lt;code&gt;http&lt;/code&gt;非持久性协议, AJAX轮询机制或者 &lt;code&gt;long pull&lt;/code&gt;方式; 前者服务器压力大, 后者等待时间长&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http1.1&lt;/code&gt;默认开启&lt;code&gt;keep alive&lt;/code&gt;长连接,但是一次只能一个,被动式触发&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="websocket" scheme="http://example.com/tags/websocket/"/>
    
    <category term="http" scheme="http://example.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>开发工具集(随缘更新)</title>
    <link href="http://example.com/post/334c8733.html"/>
    <id>http://example.com/post/334c8733.html</id>
    <published>2020-11-13T08:06:48.000Z</published>
    <updated>2021-01-05T02:35:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="terminal增加管理员身份"><a href="#terminal增加管理员身份" class="headerlink" title="terminal增加管理员身份"></a>terminal增加管理员身份</h2><h3 id="安装gsudo"><a href="#安装gsudo" class="headerlink" title="安装gsudo"></a>安装gsudo</h3><p>打开<code>terminal</code>执行如下命令:</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PowerShell -Command &quot;Set-ExecutionPolicy RemoteSigned -scope Process; iwr -useb https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;gerardog&#x2F;gsudo&#x2F;master&#x2F;installgsudo.ps1 | iex&quot;</span><br></pre></td></tr></table></figure><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>安装完成以后,打开命令行工具<code>setting.json</code>文件,在list对象中添加如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;guid&quot;: &quot;&#123;41dd7a51-f0e1-4420-a2ec-1a7130b7e950&#125;&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;PowerShell Admin&quot;,</span><br><span class="line">  &quot;commandline&quot;: &quot;gsudo.exe powershell.exe&quot;,</span><br><span class="line">  &quot;hidden&quot;: false,</span><br><span class="line">  &quot;colorScheme&quot;: &quot;Solarized Dark&quot;,</span><br><span class="line">  &quot;fontFace&quot;: &quot;Fira Code&quot;,</span><br><span class="line">  &quot;icon&quot; : &quot;https:&#x2F;&#x2F;i.imgur.com&#x2F;Giuj3FT.png&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重启<code>terminal</code>即可</p><h2 id="cmder"><a href="#cmder" class="headerlink" title="cmder"></a>cmder</h2><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>新增用户变量<code>CMDER_ROOT</code>,值为CMDER的路径,比如<code>C:\cmder</code>,把用户变量添加到<code>Path</code>环境变量,值是<code>%CMDER_ROOT%</code></p><h3 id="右键菜单"><a href="#右键菜单" class="headerlink" title="右键菜单"></a>右键菜单</h3><p>以管理员命令打开命令行工具,执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd %CMDER_ROOT%</span><br></pre></td></tr></table></figure><p>然后输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cmder.exe &#x2F;REGISTER ALL</span><br></pre></td></tr></table></figure><h3 id="解决中文乱码"><a href="#解决中文乱码" class="headerlink" title="解决中文乱码"></a>解决中文乱码</h3><p>cmder命令行工具的设置选项中的环境(Environment)追加如下代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set PATH&#x3D;%ConEmuBaseDir%\Scripts;%PATH%</span><br><span class="line">set LANG&#x3D;zh_CN.UTF-8</span><br><span class="line">set LC_ALL&#x3D;zh_CN.utf8</span><br><span class="line">chcp utf-8</span><br></pre></td></tr></table></figure><h3 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h3><h4 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h4><p>字体: <a href="https://luckytao.lanzous.com/i8gddicxk4h">Fira Code</a></p><p>配置如图</p><img src="/post/334c8733/cmder.jpg" class=""><h4 id="下载Cmder-powerline-prompt"><a href="#下载Cmder-powerline-prompt" class="headerlink" title="下载Cmder-powerline-prompt"></a>下载Cmder-powerline-prompt</h4><p>配置: <a href="https://luckytao.lanzous.com/i4qmpictamb">传送门</a></p><p>把<code>.lua</code>文件都放在<code>%CMDER_ROOT%/config</code>目录中,然后重启cmder</p><h2 id="mindmaster"><a href="#mindmaster" class="headerlink" title="mindmaster"></a>mindmaster</h2><ol><li>断网操作，拔掉网线，实在不行砸烂电脑万能的断网方法；</li><li>运行主程序，随便创建一个导图，选择帮助-&gt;激活；</li><li>运行MindMaster KeyGen注册机，第一个文本框输入内容“任意内容”点击计算；</li><li>在软件的激活窗口，填入用户名和注册机第二个文本框的激活码，点击激活；</li><li>如图所示，出现激活失败的界面，不要急，这是正常的，点击ok，然后我们进行手动激活；</li><li>复制注册机第三个文本框内容，填入，点击激活即可；</li><li>重启软件即可恢复联网！</li></ol><p><a href="https://pan.baidu.com/s/1U9lgmGyeyDhnS93G67aUNg">传送门</a>,提取码: <code>i2yj</code></p><h2 id="网盘下载工具kinhdown"><a href="#网盘下载工具kinhdown" class="headerlink" title="网盘下载工具kinhdown"></a>网盘下载工具kinhdown</h2><p>kinhdown: <a href="https://kinhdown.kinh.cc/">传送门</a></p><h2 id="markdown工具"><a href="#markdown工具" class="headerlink" title="markdown工具"></a>markdown工具</h2><p>typora: <a href="https://luckytao.lanzous.com/iDh9qijno4d">传送门</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;terminal增加管理员身份&quot;&gt;&lt;a href=&quot;#terminal增加管理员身份&quot; class=&quot;headerlink&quot; title=&quot;terminal增加管理员身份&quot;&gt;&lt;/a&gt;terminal增加管理员身份&lt;/h2&gt;&lt;h3 id=&quot;安装gsudo&quot;&gt;&lt;a href=&quot;#安装gsudo&quot; class=&quot;headerlink&quot; title=&quot;安装gsudo&quot;&gt;&lt;/a&gt;安装gsudo&lt;/h3&gt;&lt;p&gt;打开&lt;code&gt;terminal&lt;/code&gt;执行如下命令:&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="命令行" scheme="http://example.com/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>jQuery之dropdown插件</title>
    <link href="http://example.com/post/8801d33c.html"/>
    <id>http://example.com/post/8801d33c.html</id>
    <published>2020-11-12T11:40:27.000Z</published>
    <updated>2021-01-05T02:35:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-dropdown插件的大致逻辑"><a href="#一-dropdown插件的大致逻辑" class="headerlink" title="一. dropdown插件的大致逻辑"></a>一. dropdown插件的大致逻辑</h2><h3 id="1-1-渲染结构"><a href="#1-1-渲染结构" class="headerlink" title="1.1 渲染结构"></a>1.1 渲染结构</h3><p>   第一步: div做渲染元素,用id或者class渲染结构,调用插件的方式应该是<code>$(&#39;#xxx&#39;).dropdown(opts)</code>,调用插件的时候要渲染好内部结构,<br> 生成按钮和展开收缩符号,点击按钮和符号的时候,先判断下面的选项框有没有展示出来,如果展示出来了,那么收缩,否则就展开;<br>   <a id="more"></a><br>   第二步: 点击下拉框选项的时候,执行下拉选项事件,需要一个方法去监听下拉事件,对下拉选中按钮进行操作</p><p>   第三步: 扩展(设置一个type可以自定义悬浮展示还是点击展示;点击其他地方的时候下拉选项要关闭)</p><h3 id="1-2-问题点"><a href="#1-2-问题点" class="headerlink" title="1.2 问题点"></a>1.2 问题点</h3><p>问题一: 下拉选项的监听事件怎么写?</p><p>期望的结构如图(element结构):</p><img src="/post/8801d33c/dropdown.jpg" class=""><p>期望的代码如下:</p><pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  var dropdown = $(&#x27;#xxx&#x27;)..dropdown(opts)</span><br><span class="line">dropdown.choose(function(args)&#123;</span><br><span class="line">    if(args == xx)&#123;</span><br><span class="line">          //选中项opt1</span><br><span class="line">    &#125;else if(args == yy)&#123;</span><br><span class="line">        //选中项opt2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></code></pre><h2 id="二-dropdown插件编写"><a href="#二-dropdown插件编写" class="headerlink" title="二. dropdown插件编写"></a>二. dropdown插件编写</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一-dropdown插件的大致逻辑&quot;&gt;&lt;a href=&quot;#一-dropdown插件的大致逻辑&quot; class=&quot;headerlink&quot; title=&quot;一. dropdown插件的大致逻辑&quot;&gt;&lt;/a&gt;一. dropdown插件的大致逻辑&lt;/h2&gt;&lt;h3 id=&quot;1-1-渲染结构&quot;&gt;&lt;a href=&quot;#1-1-渲染结构&quot; class=&quot;headerlink&quot; title=&quot;1.1 渲染结构&quot;&gt;&lt;/a&gt;1.1 渲染结构&lt;/h3&gt;&lt;p&gt;   第一步: div做渲染元素,用id或者class渲染结构,调用插件的方式应该是&lt;code&gt;$(&amp;#39;#xxx&amp;#39;).dropdown(opts)&lt;/code&gt;,调用插件的时候要渲染好内部结构,&lt;br&gt; 生成按钮和展开收缩符号,点击按钮和符号的时候,先判断下面的选项框有没有展示出来,如果展示出来了,那么收缩,否则就展开;&lt;br&gt;</summary>
    
    
    
    <category term="jQuery" scheme="http://example.com/categories/jQuery/"/>
    
    <category term="插件" scheme="http://example.com/categories/jQuery/%E6%8F%92%E4%BB%B6/"/>
    
    
    <category term="jQuery" scheme="http://example.com/tags/jQuery/"/>
    
    <category term="dropdown" scheme="http://example.com/tags/dropdown/"/>
    
  </entry>
  
</feed>
